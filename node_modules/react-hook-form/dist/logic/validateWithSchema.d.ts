import { FieldValues, SchemaValidateOptions, FieldErrors } from '../types';
interface SchemaValidationResult<FormValues> {
    fieldErrors: FieldErrors<FormValues>;
    result: FieldValues;
}
interface YupValidationError {
    inner: {
        path: string;
        message: string;
        type: string;
    }[];
    path: string;
    message: string;
    type: string;
}
interface Schema<Data> {
    validate(value: FieldValues, options?: SchemaValidateOptions): Promise<Data>;
}
export declare const parseErrorSchema: <FormValues>(error: YupValidationError, validateAllFieldCriteria: boolean) => Partial<Record<import("../types").FieldName<FormValues>, import("../types").FieldError>>;
export default function validateWithSchema<FormValues>(validationSchema: Schema<FormValues>, validationSchemaOption: SchemaValidateOptions, validateAllFieldCriteria: boolean, data: FieldValues): Promise<SchemaValidationResult<FormValues>>;
export {};
