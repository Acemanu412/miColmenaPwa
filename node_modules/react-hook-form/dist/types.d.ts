import * as React from 'react';
export declare type FieldValues = Record<string, any>;
declare type BaseFieldName<FormValues extends FieldValues> = Extract<keyof FormValues, string>;
export declare type FieldName<FormValues extends FieldValues> = BaseFieldName<FormValues> | string;
export declare type FieldValue<FormValues extends FieldValues> = FormValues[FieldName<FormValues>];
export declare type Ref = HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement | any;
export interface ValidationMode {
    onBlur: 'onBlur';
    onChange: 'onChange';
    onSubmit: 'onSubmit';
}
export declare type Mode = keyof ValidationMode;
export declare type OnSubmit<FormValues extends FieldValues> = (data: FormValues, event: React.BaseSyntheticEvent) => void | Promise<void>;
export declare type SchemaValidateOptions = Partial<{
    strict: boolean;
    abortEarly: boolean;
    stripUnknown: boolean;
    recursive: boolean;
    context: object;
}>;
export declare type UseFormOptions<FormValues extends FieldValues = FieldValues> = Partial<{
    mode: Mode;
    reValidateMode: Mode;
    defaultValues: Partial<FormValues>;
    validationSchemaOption: SchemaValidateOptions;
    validationSchema: any;
    nativeValidation: boolean;
    submitFocusError: boolean;
    validateCriteriaMode: 'firstError' | 'all';
}>;
export interface MutationWatcher {
    disconnect: VoidFunction;
    observe?: any;
}
declare type ValidationOptionObject<Value> = Value | {
    value: Value;
    message: string;
};
export declare type ValidationValue = number | string | RegExp;
export declare type ValidateResult = string | boolean | undefined;
export declare type Validate = (data: any) => ValidateResult;
export declare type ValidationOptions = Partial<{
    required: boolean | string;
    min: ValidationOptionObject<number | string>;
    max: ValidationOptionObject<number | string>;
    maxLength: ValidationOptionObject<number | string>;
    minLength: ValidationOptionObject<number | string>;
    pattern: ValidationOptionObject<RegExp>;
    validate: Validate | Record<string, Validate> | {
        value: Validate | Record<string, Validate>;
        message: string;
    };
}>;
export declare type MultipleFieldErrors = Record<string, ValidateResult>;
export interface FieldError {
    type: string;
    ref?: Ref;
    types?: MultipleFieldErrors;
    message?: ValidateResult;
    isManual?: boolean;
}
export interface ManualFieldError<FormValues> {
    name: FieldName<FormValues>;
    type: string;
    types?: MultipleFieldErrors;
    message?: string;
}
export interface Field extends ValidationOptions {
    ref: Ref;
    mutationWatcher?: MutationWatcher;
    options?: {
        ref: Ref;
        mutationWatcher?: MutationWatcher;
    }[];
}
export declare type FieldRefs<FormValues extends FieldValues> = Partial<Record<FieldName<FormValues>, Field>>;
export declare type FieldErrors<FormValues extends FieldValues> = Partial<Record<FieldName<FormValues>, FieldError>>;
export interface SubmitPromiseResult<FormValues extends FieldValues> {
    errors: FieldErrors<FormValues>;
    values: FormValues;
}
export interface ValidationPayload<Name, Value> {
    name: Name;
    value?: Value;
}
export interface FormStateProxy<FormValues extends FieldValues = FieldValues> {
    dirty: boolean;
    isSubmitted: boolean;
    submitCount: number;
    touched: FieldName<FormValues>[];
    isSubmitting: boolean;
    isValid: boolean;
}
export declare type ReadFormState = {
    [P in keyof FormStateProxy]: boolean;
};
export interface NameProp {
    name: string;
}
export interface RadioOrCheckboxOption {
    ref?: Ref;
    mutationWatcher?: MutationWatcher;
}
export interface ElementLike extends NameProp {
    type?: string;
    value?: string;
    checked?: boolean;
    options?: any;
}
export {};
